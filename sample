12
using System;
using System.Data;
using System.Linq;

class Program
{
    static void Main()
    {
        // Sample source DataTable
        DataTable sourceDataTable = new DataTable();
        sourceDataTable.Columns.Add("ID", typeof(int));
        sourceDataTable.Columns.Add("Name", typeof(string));
        sourceDataTable.Rows.Add(1, "John");
        sourceDataTable.Rows.Add(2, "Jane");
        sourceDataTable.Rows.Add(3, "Doe");

        // Sample target DataTable with differences
        DataTable targetDataTable = new DataTable();
        targetDataTable.Columns.Add("ID", typeof(int));
        targetDataTable.Columns.Add("Name", typeof(string));
        targetDataTable.Rows.Add(1, "John");
        targetDataTable.Rows.Add(2, "JaneUpdated"); // Difference
        targetDataTable.Rows.Add(4, "NewPerson");   // Difference

        // Create a list to store columns to be added
        var columnsToAdd = sourceDataTable.Columns.Cast<DataColumn>().Select(col => col.ColumnName).ToList();

        // Add additional column to the source DataTable for differences
        sourceDataTable.Columns.Add("Difference", typeof(string));

        // Retrieve column names dynamically excluding columns not in the table
        string[] columnsToCompare = sourceDataTable.Columns.Cast<DataColumn>()
            .Where(col => targetDataTable.Columns.Contains(col.ColumnName))
            .Select(col => col.ColumnName)
            .ToArray();

        // Use LINQ to compare and concatenate differences
        var differences = from sourceRow in sourceDataTable.AsEnumerable()
                          from targetRow in targetDataTable.AsEnumerable()
                          where columnsToCompare.All(col => sourceRow.Field<object>(col).Equals(targetRow.Field<object>(col)))
                          select new
                          {
                              SourceValues = columnsToCompare.ToDictionary(col => col, col => sourceRow[col]),
                              TargetValues = columnsToCompare.ToDictionary(col => col, col => targetRow[col]),
                              IsDifferent = columnsToCompare.Any(col => !sourceRow[col].Equals(targetRow[col]))
                          };

        // Update the differences column in the source DataTable
        foreach (var diff in differences)
        {
            DataRow sourceRow = sourceDataTable.Rows.Cast<DataRow>()
                .SingleOrDefault(row => columnsToCompare.All(col => row.Field<object>(col).Equals(diff.SourceValues[col])));

            // Create a comma-separated string of differences
            string diffValue = diff.IsDifferent
                ? string.Join(", ", columnsToCompare.Where(col => !diff.SourceValues[col].Equals(diff.TargetValues[col])))
                : string.Empty;

            sourceRow?.SetField("Difference", diffValue);
        }

        // Display the result
        foreach (DataRow row in sourceDataTable.Rows)
        {
            Console.WriteLine($"Values: {string.Join(", ", columnsToCompare.Select(col => $"{col}: {row[col]}"))}");
            Console.WriteLine($"Difference: {row["Difference"]}");
            Console.WriteLine();
        }
    }
}
