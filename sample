public static (DataTable table1, DataTable table2, string differenceColumns) CompareDataTables(DataTable table1, DataTable table2)
{
    // Get common columns
    var commonColumns = table1.Columns.Cast<DataColumn>()
                               .Intersect(table2.Columns.Cast<DataColumn>(), new DataColumnEqualityComparer())
                               .Select(c => c.ColumnName).ToList();

    // Add difference columns
    foreach (var col in commonColumns)
    {
        table1.Columns.Add($"Diff_{col}", typeof(bool));
        table2.Columns.Add($"Diff_{col}", typeof(bool));

        for (int i = 0; i < table1.Rows.Count; i++)
        {
            table1.Rows[i]["Diff_" + col] = !table1.Rows[i][col].Equals(table2.Rows[i][col]);
            table2.Rows[i]["Diff_" + col] = !table1.Rows[i][col].Equals(table2.Rows[i][col]);
        }
    }

    // Get all column names including difference columns
    var allColumns = table1.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList();
    allColumns.AddRange(table2.Columns.Cast<DataColumn>().Select(c => c.ColumnName).ToList());

    // Filter difference columns and format as comma-separated string
    var differenceColumns = string.Join(", ", allColumns.Where(col => col.StartsWith("Diff_")));
    if (string.IsNullOrEmpty(differenceColumns))
    {
        differenceColumns = "No differences found";
    }

    return (table1, table2, differenceColumns);
}

public class DataColumnEqualityComparer : IEqualityComparer<DataColumn>
{
    public bool Equals(DataColumn x, DataColumn y)
    {
        return x.ColumnName == y.ColumnName && x.DataType == y.DataType;
    }

    public int GetHashCode(DataColumn obj)
    {
        return obj.ColumnName.GetHashCode() ^ obj.DataType.GetHashCode();
    }
}
