using System;
using System.Data;
using System.Linq;

class Program
{
    static void Main()
    {
        // Sample source DataTable
        DataTable sourceDataTable = new DataTable();
        sourceDataTable.Columns.Add("ID", typeof(int));
        sourceDataTable.Columns.Add("Name", typeof(string));
        sourceDataTable.Rows.Add(1, "John");
        sourceDataTable.Rows.Add(2, "Jane");
        sourceDataTable.Rows.Add(3, "Doe");

        // Sample target DataTable with differences
        DataTable targetDataTable = new DataTable();
        targetDataTable.Columns.Add("ID", typeof(int));
        targetDataTable.Columns.Add("Name", typeof(string));
        targetDataTable.Rows.Add(1, "John");
        targetDataTable.Rows.Add(2, "JaneUpdated"); // Difference
        targetDataTable.Rows.Add(4, "NewPerson");   // Difference

        // Add additional columns to the source DataTable for differences
        foreach (DataColumn column in sourceDataTable.Columns)
        {
            sourceDataTable.Columns.Add($"{column.ColumnName}_Diff", typeof(string));
        }

        // Retrieve column names dynamically
        string[] columnsToCompare = sourceDataTable.Columns.Cast<DataColumn>().Select(col => col.ColumnName).ToArray();

        // Use LINQ to compare and concatenate differences
        var differences = from targetRow in targetDataTable.AsEnumerable()
                          join sourceRow in sourceDataTable.AsEnumerable()
                          on columnsToCompare.Select(col => targetRow.Field<object>(col)).SequenceEqual(columnsToCompare.Select(col => sourceRow.Field<object>(col)))
                          equals true into joined
                          from sourceRow in joined.DefaultIfEmpty()
                          select new
                          {
                              Values = columnsToCompare.ToDictionary(col => col, col => sourceRow?.Field<object>(col)),
                              TargetValues = columnsToCompare.ToDictionary(col => col, col => targetRow.Field<object>(col)),
                              IsDifferent = sourceRow == null || columnsToCompare.Any(col => !targetRow[col].Equals(sourceRow.Field<object>(col)))
                          };

        // Update the differences columns in the source DataTable
        foreach (var diff in differences)
        {
            DataRow sourceRow = sourceDataTable.AsEnumerable()
                .Single(row => columnsToCompare.All(col => row.Field<object>(col).Equals(diff.Values[col])));

            foreach (var col in columnsToCompare)
            {
                string diffColumnName = $"{col}_Diff";
                string diffValue = diff.IsDifferent
                    ? $"{diff.Values[col]} -> {diff.TargetValues[col]}"
                    : string.Empty;

                sourceRow.SetField(diffColumnName, diffValue);
            }
        }

        // Display the result
        foreach (DataRow row in sourceDataTable.Rows)
        {
            Console.WriteLine($"Values: {string.Join(", ", columnsToCompare.Select(col => $"{col}: {row[col]}"))}");

            foreach (var col in columnsToCompare)
            {
                string diffColumnName = $"{col}_Diff";
                Console.WriteLine($"{diffColumnName}: {row[diffColumnName]}");
            }

            Console.WriteLine();
        }
    }
}
