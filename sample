using System;
using System.Data;
using System.Linq;

class Program
{
    static void Main()
    {
        // Sample source DataTable
        DataTable sourceDataTable = new DataTable();
        sourceDataTable.Columns.Add("ID", typeof(int));
        sourceDataTable.Columns.Add("Name", typeof(string));
        sourceDataTable.Rows.Add(1, "John");
        sourceDataTable.Rows.Add(2, "Jane");
        sourceDataTable.Rows.Add(3, "Doe");

        // Sample target DataTable with differences
        DataTable targetDataTable = new DataTable();
        targetDataTable.Columns.Add("ID", typeof(int));
        targetDataTable.Columns.Add("Name", typeof(string));
        targetDataTable.Rows.Add(1, "John");
        targetDataTable.Rows.Add(2, "JaneUpdated"); // Difference
        targetDataTable.Rows.Add(4, "NewPerson");   // Difference

        // Add a column to store differences as a comma-separated string
        sourceDataTable.Columns.Add("Differences", typeof(string));

        // Retrieve column names dynamically
        string[] columnsToCompare = sourceDataTable.Columns.Cast<DataColumn>().Select(col => col.ColumnName).ToArray();

        // Use LINQ to compare and concatenate differences
        var differences = from sourceRow in sourceDataTable.AsEnumerable()
                          join targetRow in targetDataTable.AsEnumerable()
                          on columnsToCompare.Select(col => sourceRow.Field<object>(col)).SequenceEqual(columnsToCompare.Select(col => targetRow.Field<object>(col)))
                          equals columnsToCompare.Select(col => targetRow.Field<object>(col)).SequenceEqual(columnsToCompare.Select(col => sourceRow.Field<object>(col)))
                          into joined
                          from targetRow in joined.DefaultIfEmpty()
                          select new
                          {
                              Values = columnsToCompare.ToDictionary(col => col, col => sourceRow[col]),
                              TargetValues = targetRow != null ? columnsToCompare.ToDictionary(col => col, col => targetRow[col]) : null,
                              IsDifferent = targetRow == null || columnsToCompare.Any(col => !sourceRow[col].Equals(targetRow[col]))
                          };

        // Update the Differences column in the source DataTable
        foreach (var diff in differences)
        {
    
