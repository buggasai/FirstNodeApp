using Excel = Microsoft.Office.Interop.Excel;
using System.Data;

class Program
{
    static void Main()
    {
        string filePath = "path_to_your_excel_file.xlsx";

        DataTable dataTable = ReadExcelToDataTable(filePath);

        // Now you have the data in the DataTable, you can perform further operations.
        // For example, you can iterate through the rows and columns:

        foreach (DataRow row in dataTable.Rows)
        {
            foreach (var item in row.ItemArray)
            {
                Console.Write(item + "\t");
            }
            Console.WriteLine();
        }
    }

    static DataTable ReadExcelToDataTable(string filePath)
    {
        Excel.Application excelApp = new Excel.Application();
        Excel.Workbook workbook = excelApp.Workbooks.Open(filePath);
        Excel.Worksheet worksheet = (Excel.Worksheet)workbook.Sheets[1];

        DataTable dataTable = new DataTable(worksheet.Name);

        int columnsCount = worksheet.UsedRange.Columns.Count;
        int rowsCount = worksheet.UsedRange.Rows.Count;

        // Adding columns to DataTable
        for (int col = 1; col <= columnsCount; col++)
        {
            string columnName = (worksheet.Cells[1, col] as Excel.Range).Value.ToString();
            dataTable.Columns.Add(columnName);
        }

        // Adding rows to DataTable
        for (int row = 2; row <= rowsCount; row++)
        {
            DataRow dataRow = dataTable.NewRow();

            for (int col = 1; col <= columnsCount; col++)
            {
                dataRow[col - 1] = (worksheet.Cells[row, col] as Excel.Range).Value;
            }

            dataTable.Rows.Add(dataRow);
        }

        // Close and quit Excel
        workbook.Close();
        excelApp.Quit();

        // Release COM objects to avoid memory leaks
        System.Runtime.InteropServices.Marshal.ReleaseComObject(worksheet);
        System.Runtime.InteropServices.Marshal.ReleaseComObject(workbook);
        System.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);

        return dataTable;
    }
}
