using System;
using System.Runtime.InteropServices;
using Excel = Microsoft.Office.Interop.Excel;

class Program
{
    static void Main()
    {
        // Create a new Excel application
        Excel.Application excelApp = new Excel.Application();

        // Make the application visible (optional for demonstration)
        excelApp.Visible = true;

        // Define the path to the workbook
        string filePath = @"C:\path\to\your\file.xlsx";

        // Open the workbook
        Excel.Workbook workbook = excelApp.Workbooks.Open(filePath);

        // Assuming you are working with the first sheet in the workbook
        Excel.Worksheet worksheet = (Excel.Worksheet)workbook.Sheets[1];

        try
        {
            // Define the range starting from row 8 downwards
            int startRow = 8;
            int numRows = worksheet.UsedRange.Rows.Count - startRow + 1;

            Excel.Range startCell = worksheet.Cells[startRow, 2]; // B8
            Excel.Range endCell = worksheet.Cells[startRow + numRows - 1, 2]; // B column, last row with data
            Excel.Range filterRange = worksheet.Range[startCell, endCell];

            // Apply filter on "Berater" (Column B) smallest to largest
            filterRange.Sort(
                Key1: worksheet.Range["B8"], // Column B range (starting from B8)
                Order1: Excel.XlSortOrder.xlAscending,
                Orientation: Excel.XlSortOrientation.xlSortColumns
            );

            // Apply filter on "D handling" (Column H) smallest to largest
            filterRange.Sort(
                Key1: worksheet.Range["H8"], // Column H range (starting from H8)
                Order1: Excel.XlSortOrder.xlAscending,
                Orientation: Excel.XlSortOrientation.xlSortColumns
            );

            // Apply filter on "Eraang" (Column E) oldest to newest
            filterRange.Sort(
                Key1: worksheet.Range["E8"], // Column E range (starting from E8)
                Order1: Excel.XlSortOrder.xlAscending,
                Orientation: Excel.XlSortOrientation.xlSortColumns
            );

            // Autofit columns to adjust width automatically (optional)
            worksheet.Columns.AutoFit();

            // Save the workbook (optional if you want to keep changes)
            workbook.Save();

            Console.WriteLine("Filters applied successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying filters: {ex.Message}");
        }
        finally
        {
            // Close the workbook and quit Excel application
            workbook.Close(false);
            excelApp.Quit();

            // Clean up
            Marshal.ReleaseComObject(worksheet);
            Marshal.ReleaseComObject(workbook);
            Marshal.ReleaseComObject(excelApp);

            GC.Collect();
            GC.WaitForPendingFinalizers();
        }
    }
}
