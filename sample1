using Excel = Microsoft.Office.Interop.Excel;

public void SortExcelWorksheet(string filePath)
{
    // Create a new Excel application
    Excel.Application excelApp = new Excel.Application();
    
    // Open the workbook
    Excel.Workbook workbook = excelApp.Workbooks.Open(filePath);
    Excel.Worksheet worksheet = workbook.Sheets[1];

    // Get the used range
    Excel.Range usedRange = worksheet.UsedRange;

    // Set the sorting range (from row 9 onwards since headers are in row 8)
    Excel.Range sortRange = worksheet.Range["A9", usedRange.SpecialCells(Excel.XlCellType.xlCellTypeLastCell)];

    // Initialize the sort object
    Excel.Sort sort = worksheet.Sort;
    sort.SetRange(sortRange);
    sort.Header = Excel.XlYesNoGuess.xlYes; // Specifies that there is a header row

    // First, sort by Column E (Oldest to Newest)
    sort.SortFields.Clear();
    sort.SortFields.Add(
        Key: worksheet.Columns["E"],
        SortOn: Excel.XlSortOn.xlSortOnValues,
        Order: Excel.XlSortOrder.xlAscending,
        DataOption: Excel.XlSortDataOption.xlSortNormal
    );

    // Then, sort by Column H (Smallest to Largest)
    sort.SortFields.Add(
        Key: worksheet.Columns["H"],
        SortOn: Excel.XlSortOn.xlSortOnValues,
        Order: Excel.XlSortOrder.xlAscending,
        DataOption: Excel.XlSortDataOption.xlSortNormal
    );

    // Finally, sort by Column B (Smallest to Largest)
    sort.SortFields.Add(
        Key: worksheet.Columns["B"],
        SortOn: Excel.XlSortOn.xlSortOnValues,
        Order: Excel.XlSortOrder.xlAscending,
        DataOption: Excel.XlSortDataOption.xlSortNormal
    );

    // Apply the sorting
    sort.Apply();

    // Save and close the workbook
    workbook.Save();
    workbook.Close();
    excelApp.Quit();

    // Release COM objects to avoid memory leaks
    System.Runtime.InteropServices.Marshal.ReleaseComObject(worksheet);
    System.Runtime.InteropServices.Marshal.ReleaseComObject(workbook);
    System.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);
}
