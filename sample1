using Newtonsoft.Json;
using System;
using System.Collections.Generic;

public class Param
{
    public string param_name { get; set; }
    public string param_value { get; set; }
}

public class TriggerInputs
{
    public List<Param> paramlist { get; set; }
}

public class RootObject
{
    public TriggerInputs triggerInputs { get; set; }
}

class Program
{
    static void Main(string[] args)
    {
        // Replace this JSON string with the actual JSON content from the image
        string json = @"{
           'triggerInputs': {
               'paramlist': [
                   { 'param_name': 'CelergoEnvironment', 'param_value': 'Celergo Stage' },
                   { 'param_name': 'ClientName', 'param_value': 'TestCNO01' },
                   { 'param_name': 'PayrollIdList', 'param_value': '701,702' },
                   { 'param_name': 'PayrollName', 'param_value': 'TestPN' },
                   { 'param_name': 'ClientCode', 'param_value': 'TestCC001' }
               ]
           }
        }";

        // Deserialize JSON
        RootObject obj = JsonConvert.DeserializeObject<RootObject>(json);

        // Function to get param_value by param_name
        string GetParamValue(string paramName, List<Param> paramList)
        {
            foreach (var param in paramList)
            {
                if (param.param_name == paramName)
                {
                    return param.param_value;
                }
            }
            return null; // Return null if param_name not found
        }

        // Example usage: Get param_value for 'ClientName'
        string paramNameToFind = "ClientName";
        string paramValue = GetParamValue(paramNameToFind, obj.triggerInputs.paramlist);

        if (paramValue != null)
        {
            Console.WriteLine($"The value for '{paramNameToFind}' is: {paramValue}");
        }
        else
        {
            Console.WriteLine($"'{paramNameToFind}' not found in the paramlist.");
        }
    }
}
