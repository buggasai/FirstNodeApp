using System;
using System.Collections.Generic;
using System.Data;
using Excel = Microsoft.Office.Interop.Excel;

class Program
{
    static void Main()
    {
        // Define the list of expected column names
        List<string> expectedColumns = new List<string>
        {
            "Column1", "Column2", "Column3", "Column4"
        };

        // Load Excel file and convert the worksheet data to DataTable
        DataTable dataTable = ConvertExcelToDataTable(@"C:\path\to\your\file.xlsx");

        // Check for missing columns
        List<string> missingColumns = new List<string>();

        foreach (var expectedColumn in expectedColumns)
        {
            if (!dataTable.Columns.Contains(expectedColumn))
            {
                missingColumns.Add(expectedColumn);
            }
        }

        // Display missing columns
        if (missingColumns.Count > 0)
        {
            Console.WriteLine("Missing columns:");
            foreach (var column in missingColumns)
            {
                Console.WriteLine(column);
            }
        }
        else
        {
            Console.WriteLine("All expected columns are present.");
        }
    }

    // Function to convert Excel worksheet to DataTable
    static DataTable ConvertExcelToDataTable(string filePath)
    {
        // Initialize Excel application
        Excel.Application excelApp = new Excel.Application();
        Excel.Workbook workbook = excelApp.Workbooks.Open(filePath);
        Excel.Worksheet worksheet = workbook.Sheets[1];
        Excel.Range usedRange = worksheet.UsedRange;

        // Create a new DataTable
        DataTable dataTable = new DataTable();

        // Read the first row (assuming it's the header row) to create columns in DataTable
        for (int col = 1; col <= usedRange.Columns.Count; col++)
        {
            string columnName = usedRange.Cells[1, col].Value2?.ToString() ?? $"Column{col}";
            dataTable.Columns.Add(columnName);
        }

        // Read the rest of the rows and add to DataTable
        for (int row = 2; row <= usedRange.Rows.Count; row++) // Start from row 2 (data rows)
        {
            DataRow dataRow = dataTable.NewRow();
            for (int col = 1; col <= usedRange.Columns.Count; col++)
            {
                dataRow[col - 1] = usedRange.Cells[row, col].Value2?.ToString() ?? string.Empty;
            }
            dataTable.Rows.Add(dataRow);
        }

        // Clean up
        workbook.Close(false);
        excelApp.Quit();

        return dataTable;
    }
}
